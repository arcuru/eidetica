# https://taskfile.dev

version: "3"

tasks:
  default:
    cmd: task --list
    silent: true
  dev:
    desc: Quick development feedback (build + test + clippy)
    aliases: [d]
    cmds:
      - task: build
      - task: test
      - task: clippy
  ci:full:
    desc: Run CI locally in containers
    cmds:
      - act --workflows .github/workflows/rust.yml
  ci:local:
    desc: Run CI locally
    aliases: [ci]
    deps: [audit, doc, fmt, test, clippy, build]
  ci:nix:
    desc: Run Nix CI checks
    deps: [nix:check]
  nix:check:
    desc: Run Nix CI checks
    cmds:
      - nix flake check
  nix:build:
    desc: Run Nix Build
    cmds:
      - nix build
  clippy:
    desc: Run clippy
    cmds:
      - cargo clippy --workspace --all-targets --all-features -- -D warnings
  clippy:fix:
    desc: Run clippy fixes
    cmds:
      - cargo clippy --workspace --fix --allow-dirty --all-targets --all-features --allow-no-vcs -- -D warnings
  fmt:
    desc: Run all formatters
    cmds:
      - cargo fmt --all
      - alejandra . &> /dev/null
      - prettier --write . &> /dev/null
  test:
    desc: Run all tests
    aliases: [t]
    cmds:
      - cargo nextest run --workspace --all-features --no-fail-fast --status-level fail
      - cargo test --doc --workspace --all-features --quiet
      - task: book:test
  test:full:
    desc: Run all tests including ignored ones
    aliases: [tf]
    cmds:
      - cargo nextest run --workspace --all-features --no-fail-fast --status-level fail --run-ignored all
      - cargo test --doc --workspace --all-features --quiet
      - task: book:test
  doc:
    desc: Build the documentation
    cmd: cargo doc --workspace --all-features --quiet
  audit:
    desc: Run cargo security/license audit
    cmds:
      - cargo audit
      - cargo deny check
  build:debug:
    desc: Build the project
    aliases: [b, build]
    cmd: cargo build --workspace --all-targets --all-features --quiet
  build:release:
    desc: Build the project release
    aliases: [br, release]
    cmd: cargo build --workspace --all-targets --all-features --release --quiet
  coverage:
    desc: Generate coverage data
    aliases: [cov]
    cmd: cargo tarpaulin --workspace --skip-clean --all-features --output-dir coverage --out lcov --engine llvm
  todo-test:
    desc: Run the todo example integration test
    dir: examples/todo
    cmd: ./test.sh
  book:
    desc: Build the mdbook documentation
    cmds:
      - mdbook build docs
  book:serve:
    desc: Serve the mdbook documentation locally
    cmds:
      - mdbook serve docs --open
  book:test:
    desc: Test code examples in the mdbook
    cmds:
      # The book tests require a single copy of libeidetica target/debug/deps
      # This is a workaround to remove and rebuild only 1
      - rm -f target/debug/deps/libeidetica-*.rlib target/debug/deps/libeidetica-*.rmeta
      - cargo build -p eidetica --features full
      - RUST_LOG=warn mdbook test docs -L target/debug/deps
  book:clean:
    desc: Clean the mdbook build directory
    cmds:
      - mdbook clean docs
  bench:
    desc: Run benchmarks and open HTML report
    aliases: [benchmark]
    cmds:
      - cargo bench --workspace
      - xdg-open target/criterion/report/index.html 2>/dev/null
  min-versions:
    desc: Check the minimum versions of the dependencies
    cmds:
      - cargo update -Z minimal-versions && cargo build --workspace --all-targets --all-features --quiet && cargo nextest run --workspace --all-features --status-level fail
      # We do _not_ want to run the clippy check here, because it will fail
